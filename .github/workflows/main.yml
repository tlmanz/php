name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  static:
    name: Static Analysis and Testing
    runs-on: ubuntu-latest
    container:
      image: xmmedia/php:8.2-cli

    env:
      APP_ENV: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/composer-2.phar -o composer.phar
          php composer.phar --version

      - name: Security Checks
        run: |
          symfony security:check
          npm audit --audit-level=high

      - name: PHP Lint and Tests
        run: |
          php composer.phar install --no-interaction --no-progress --ignore-platform-reqs
          yarn install --immutable
          php bin/console cache:warmup --env=dev
          php bin/phpstan analyse --no-progress --memory-limit=1G src
          php bin/console lint:yaml config
          php bin/console lint:twig templates
          php bin/console lint:container

      - name: JavaScript and CSS Linting
        run: |
          npm run lint:js
          npm run lint:css

      - name: PHP Unit Tests
        run: |
          mkdir -p public/build
          echo "{}" > public/build/manifest.json
          php bin/simple-phpunit

  # deploy:
  #   name: Deploy Application
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       environment: [staging, demo, production]

  #   environment:
  #     name: ${{ matrix.environment }}
  #     url: ${{ secrets.STAGING_URL }}

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: 8.2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Install Composer
  #       run: |
  #         curl -sS https://getcomposer.org/composer-2.phar -o composer.phar
  #         php composer.phar install --no-dev --classmap-authoritative --no-interaction --no-progress

  #     - name: Install Node.js Dependencies
  #       run: |
  #         npm install --immutable
  #         npm run build

  #     - name: Set Environment Variables
  #       id: env-vars
  #       run: |
  #         if [ "${{ matrix.environment }}" = "staging" ]; then
  #           echo "url=${{ secrets.STAGING_URL }}" >> $GITHUB_OUTPUT
  #           echo "remote_server=${{ secrets.STAGING_REMOTE_SERVER }}" >> $GITHUB_OUTPUT
  #           echo "remote_user=${{ secrets.STAGING_REMOTE_USER }}" >> $GITHUB_OUTPUT
  #           echo "remote_port=${{ secrets.STAGING_REMOTE_PORT }}" >> $GITHUB_OUTPUT
  #           echo "remote_base=${{ secrets.STAGING_REMOTE_BASE }}" >> $GITHUB_OUTPUT
  #         elif [ "${{ matrix.environment }}" = "demo" ]; then
  #           echo "url=${{ secrets.DEMO_URL }}" >> $GITHUB_OUTPUT
  #           echo "remote_server=${{ secrets.DEMO_REMOTE_SERVER }}" >> $GITHUB_OUTPUT
  #           echo "remote_user=${{ secrets.DEMO_REMOTE_USER }}" >> $GITHUB_OUTPUT
  #           echo "remote_port=${{ secrets.DEMO_REMOTE_PORT }}" >> $GITHUB_OUTPUT
  #           echo "remote_base=${{ secrets.DEMO_REMOTE_BASE }}" >> $GITHUB_OUTPUT
  #         else
  #           echo "url=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
  #           echo "remote_server=${{ secrets.PRODUCTION_REMOTE_SERVER }}" >> $GITHUB_OUTPUT
  #           echo "remote_user=${{ secrets.PRODUCTION_REMOTE_USER }}" >> $GITHUB_OUTPUT
  #           echo "remote_port=${{ secrets.PRODUCTION_REMOTE_PORT }}" >> $GITHUB_OUTPUT
  #           echo "remote_base=${{ secrets.PRODUCTION_REMOTE_BASE }}" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Deploy to Server
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         REMOTE_SERVER: ${{ steps.env-vars.outputs.remote_server }}
  #         REMOTE_USER: ${{ steps.env-vars.outputs.remote_user }}
  #         REMOTE_PORT: ${{ steps.env-vars.outputs.remote_port }}
  #         REMOTE_BASE: ${{ steps.env-vars.outputs.remote_base }}
  #         ENVIRONMENT: ${{ matrix.environment }}
  #       run: |
  #         TIMESTAMP=$(date +%s)
  #         RELEASE="$REMOTE_BASE/releases/$TIMESTAMP"
  #         SHARED="$REMOTE_BASE/shared"

  #         echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  #         ssh-keyscan -p $REMOTE_PORT $REMOTE_SERVER >> ~/.ssh/known_hosts
          
  #         git rev-parse --verify --short HEAD > .revision

  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "mkdir -p $RELEASE $SHARED/var $SHARED/var/log/archive $SHARED/public/uploads"
  #         rsync --archive --stats --human-readable --exclude ".git/" --exclude "node_modules/" -e "ssh -p $REMOTE_PORT" . $REMOTE_USER@$REMOTE_SERVER:$RELEASE
  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "cd $RELEASE; chmod u+x bin/console"
  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "ln -sfn $RELEASE $REMOTE_BASE/current"

  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "sudo service php8.2-fpm restart"
  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "cd $REMOTE_BASE/current; php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration"

  #         ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_SERVER "ls -1d $REMOTE_BASE/releases/* | sort -rg | tail -n +5 | xargs rm -rf"

  #     - name: Confirm Deployment Success
  #       run: |
  #         curl -f ${{ steps.env-vars.outputs.url }} || (echo "Deployment failed" && exit 1)
